-- ✅ Obsidian UI Setup
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "Made by MasterZ",
    Footer = "v2.0.0",
    Icon = 0,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("Main", "user"),
    Advanced = Window:AddTab("Advanced", "settings"),
    Pathfinding = Window:AddTab("Pathfinding", "map-pin") -- New tab for pathfinding settings
}

-- ✅ Variabel Global
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PathfindingService = game:GetService("PathfindingService")
local localPlayer = Players.LocalPlayer

local clientName = ""
local jarakIkut = 5
local jarakMinimum = 2
local toggleAktif = false
local followAllowed = false
local currentFormasiTarget = nil

local followConnection = nil
local loopTask = nil
local humanoid = nil
local myRootPart = nil
local client = nil

-- New pathfinding variables
local path = nil
local lastPathUpdate = 0
local pathUpdateInterval = 1 -- Update path every 1 second
local pathfindingEnabled = true
local avoidObstacles = true
local pathfindingPrecision = 2 -- Higher values = more precise but more CPU intensive
local maxPathfindDistance = 100 -- Max distance to attempt pathfinding

-- ✅ Fungsi reset & stop
local function runStopCommand()
    followAllowed = false
    currentFormasiTarget = nil
    path = nil -- Clear current path
    if humanoid and myRootPart then
        humanoid:MoveTo(myRootPart.Position)
    end
    Options.TextboxDisplayName:SetValue("")
    Options.TextboxFormasi1:SetValue("")
    Options.TextboxFormasi2:SetValue("")
    Options.TextboxFormasi3:SetValue("")
    Options.TextboxFormasi4:SetValue("")
    local args = { "leaveSync" }
    pcall(function()
        ReplicatedStorage:WaitForChild("Connections")
            :WaitForChild("dataProviders")
            :WaitForChild("animationHandler")
            :InvokeServer(unpack(args))
    end)
    
    -- Stop pushup animation if playing
    local stopArgs = { "stopAnimation", "Push Up" }
    pcall(function()
        ReplicatedStorage:WaitForChild("Connections")
            :WaitForChild("dataProviders")
            :WaitForChild("animationHandler")
            :InvokeServer(unpack(stopArgs))
    end)
    
    Library:Notify("❌ Bot dihentikan & textbox dikosongkan", 3)
end

-- ✅ Pathfinding Functions
local function computePath(targetPosition)
    if not pathfindingEnabled or not humanoid or not myRootPart then 
        return nil 
    end
    
    -- Don't pathfind if too far away
    if (targetPosition - myRootPart.Position).Magnitude > maxPathfindDistance then
        return nil
    end
    
    local newPath = PathfindingService:CreatePath({
        AgentRadius = humanoid.HipHeight * 0.5,
        AgentHeight = humanoid.HipHeight * 2,
        AgentCanJump = humanoid.JumpPower > 0,
        WaypointSpacing = pathfindingPrecision
    })
    
    newPath:ComputeAsync(myRootPart.Position, targetPosition)
    
    if newPath.Status == Enum.PathStatus.Success then
        return newPath
    else
        -- If pathfinding fails, try a simpler path
        local simplePath = PathfindingService:CreatePath({
            AgentRadius = humanoid.HipHeight,
            AgentHeight = humanoid.HipHeight * 2.5,
            AgentCanJump = false,
            WaypointSpacing = pathfindingPrecision * 2
        })
        simplePath:ComputeAsync(myRootPart.Position, targetPosition)
        
        if simplePath.Status == Enum.PathStatus.Success then
            return simplePath
        end
    end
    
    return nil
end

local function followPath(targetHRP)
    if not path or not humanoid or not myRootPart then return end
    
    local waypoints = path:GetWaypoints()
    if #waypoints == 0 then return end
    
    -- Skip waypoints that are too close
    local nextWaypointIndex = 1
    for i, waypoint in ipairs(waypoints) do
        if (waypoint.Position - myRootPart.Position).Magnitude > jarakMinimum then
            nextWaypointIndex = i
            break
        end
    end
    
    local nextWaypoint = waypoints[nextWaypointIndex]
    
    -- Handle jumping if needed
    if nextWaypoint.Action == Enum.PathWaypointAction.Jump then
        humanoid.Jump = true
    end
    
    -- Move to waypoint
    humanoid:MoveTo(nextWaypoint.Position)
    
    -- Check if we reached the final waypoint
    if nextWaypointIndex == #waypoints then
        local finalDistance = (targetHRP.Position - myRootPart.Position).Magnitude
        if finalDistance <= jarakIkut * 1.5 then
            path = nil -- Clear path when close enough
        end
    end
end

local function smartMoveTo(targetPosition, targetHRP)
    if not humanoid or not myRootPart then return end
    
    local distance = (targetPosition - myRootPart.Position).Magnitude
    
    -- If we're close enough, just face the target
    if distance <= jarakMinimum * 1.5 then
        myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, targetHRP.Position)
        return
    end
    
    -- Use pathfinding if enabled and conditions are met
    if pathfindingEnabled and avoidObstacles and distance > jarakMinimum * 2 then
        local currentTime = tick()
        if not path or currentTime - lastPathUpdate > pathUpdateInterval then
            path = computePath(targetPosition)
            lastPathUpdate = currentTime
        end
        
        if path then
            followPath(targetHRP)
            return
        end
    end
    
    -- Fallback to direct movement if pathfinding fails or is disabled
    myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, targetHRP.Position)
    humanoid:MoveTo(targetPosition)
end

-- ✅ UI LEFT - Main Tab
local GroupBox1 = Tabs.Main:AddLeftGroupbox("Main Options")

GroupBox1:AddToggle("AktifkanFollow", {
    Text = "Aktifkan Bot Follow",
    Default = false,
    Tooltip = "Nyalakan agar bot siap menerima perintah !ikuti",
    Callback = function(Value)
        toggleAktif = Value

        if Value then
            Library:Notify("Bot Follow Diaktifkan", 3)
            if followConnection then followConnection:Disconnect() end
            if loopTask then loopTask:Disconnect() end
            setupBotFollowSystem()
        else
            Library:Notify("Bot Follow Dimatikan", 3)
            runStopCommand()
            if loopTask then loopTask:Disconnect() end
            if followConnection then followConnection:Disconnect() end
        end
    end,
})

GroupBox1:AddInput("NamaClientInput", {
    Default = "",
    Text = "Nama Client",
    Placeholder = "Contoh: MasterZ_YT",
    Callback = function(Value)
        clientName = Value
        print("Client diatur ke:", clientName)
    end,
})

-- ✅ GroupBox3 - Textboxes
local GroupBox3 = Tabs.Main:AddLeftGroupbox("Textbox")

GroupBox3:AddInput("TextboxDisplayName", {
    Default = "",
    Text = "Target DisplayName",
    Placeholder = "Kosong",
    Callback = function(Value)
        print("DisplayName target:", Value)
    end,
})

GroupBox3:AddInput("TextboxFormasi1", {
    Default = "",
    Text = "Formasi 1 Target",
    Placeholder = "Kosong",
    Callback = function(Value)
        print("Formasi 1 Target:", Value)
    end,
})

GroupBox3:AddInput("TextboxFormasi2", {
    Default = "",
    Text = "Formasi 2 Target",
    Placeholder = "Kosong",
    Callback = function(Value)
        print("Formasi 2 Target:", Value)
    end,
})

GroupBox3:AddInput("TextboxFormasi3", {
    Default = "",
    Text = "Formasi 3 Target",
    Placeholder = "Kosong",
    Callback = function(Value)
        print("Formasi 3 Target:", Value)
    end,
})

GroupBox3:AddInput("TextboxFormasi4", {
    Default = "",
    Text = "Formasi 4 Target",
    Placeholder = "Kosong",
    Callback = function(Value)
        print("Formasi 4 Target:", Value)
    end,
})

-- ✅ UI RIGHT - Distance Settings
local GroupBox2 = Tabs.Main:AddRightGroupbox("Pengaturan Jarak")

GroupBox2:AddInput("JarakIkutInput", {
    Default = "5",
    Text = "Jarak Bot",
    Placeholder = "Contoh: 5",
    Callback = function(Value)
        local number = tonumber(Value)
        if number then
            jarakIkut = number
        end
    end,
})

GroupBox2:AddInput("JarakMinimumInput", {
    Default = "2",
    Text = "Jarak Minimum Bergerak",
    Placeholder = "Contoh: 2",
    Callback = function(Value)
        local number = tonumber(Value)
        if number then
            jarakMinimum = number
        end
    end,
})

-- ✅ Pathfinding Tab
local PathfindingGroup = Tabs.Pathfinding:AddLeftGroupbox("Pathfinding Settings")

PathfindingGroup:AddToggle("EnablePathfinding", {
    Text = "Enable Smart Pathfinding",
    Default = true,
    Tooltip = "Enable advanced pathfinding to navigate around obstacles",
    Callback = function(Value)
        pathfindingEnabled = Value
        Library:Notify(Value and "Smart pathfinding enabled" or "Smart pathfinding disabled", 3)
    end
})

PathfindingGroup:AddToggle("AvoidObstacles", {
    Text = "Avoid Obstacles",
    Default = true,
    Tooltip = "Try to navigate around obstacles when possible",
    Callback = function(Value)
        avoidObstacles = Value
    end
})

PathfindingGroup:AddSlider("PathfindingPrecision", {
    Text = "Pathfinding Precision",
    Default = 2,
    Min = 1,
    Max = 5,
    Rounding = 0,
    Tooltip = "Higher = more precise but more CPU intensive",
    Callback = function(Value)
        pathfindingPrecision = Value
    end
})

PathfindingGroup:AddSlider("PathUpdateRate", {
    Text = "Path Update Rate (s)",
    Default = 1,
    Min = 0.5,
    Max = 5,
    Rounding = 1,
    Tooltip = "How often to recalculate path",
    Callback = function(Value)
        pathUpdateInterval = Value
    end
})

PathfindingGroup:AddSlider("MaxPathDistance", {
    Text = "Max Path Distance",
    Default = 100,
    Min = 20,
    Max = 500,
    Rounding = 0,
    Tooltip = "Maximum distance to attempt pathfinding",
    Callback = function(Value)
        maxPathfindDistance = Value
    end
})

-- ✅ Advanced Tab
local AdvancedControls = Tabs.Advanced:AddLeftGroupbox("Advanced Controls")

AdvancedControls:AddButton("Force Refresh", {
    Text = "Full System Refresh",
    Func = fullRefresh,
    Tooltip = "Force refresh all bot systems"
})

AdvancedControls:AddToggle("DebugMode", {
    Text = "Enable Debug Mode",
    Default = false,
    Tooltip = "Show debug information in console",
    Callback = function(Value)
        Library:Notify(Value and "Debug mode enabled" or "Debug mode disabled", 3)
    end
})

AdvancedControls:AddDropdown("AnimationSelector", {
    Values = { "Push Up", "Sit", "Dance", "Wave", "Cheer" },
    Default = "Push Up",
    Text = "Select Animation",
    Tooltip = "Choose animation to play",
    Callback = function(Value)
        Library:Notify("Selected: " .. Value, 2)
    end
})

AdvancedControls:AddButton("Play Animation", {
    Text = "Play Selected",
    Func = function()
        local selectedAnim = Options.AnimationSelector.Value
        local args = { "playAnimation", selectedAnim }
        pcall(function()
            ReplicatedStorage:WaitForChild("Connections")
                :WaitForChild("dataProviders")
                :WaitForChild("animationHandler")
                :InvokeServer(unpack(args))
        end)
        Library:Notify("Playing: " .. selectedAnim, 3)
    end,
    Tooltip = "Play the selected animation"
})

AdvancedControls:AddButton("Stop All", {
    Text = "Emergency Stop",
    Func = function()
        local args = { "stopAllAnimations" }
        pcall(function()
            ReplicatedStorage:WaitForChild("Connections")
                :WaitForChild("dataProviders")
                :WaitForChild("animationHandler")
                :InvokeServer(unpack(args))
        end)
        Library:Notify("All animations stopped", 3)
    end,
    DoubleClick = true,
    Tooltip = "Immediately stop all animations"
})

-- ✅ Fungsi bantu
local function updateBotRefs()
    local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    humanoid = character:WaitForChild("Humanoid")
    myRootPart = character:WaitForChild("HumanoidRootPart")
end

local function fullRefresh()
    runStopCommand()
    task.wait(0.5)
    
    currentFormasiTarget = nil
    followAllowed = false
    path = nil
    
    if followConnection then followConnection:Disconnect() end
    if loopTask then loopTask:Disconnect() end
    
    if toggleAktif then
        setupBotFollowSystem()
    end
    
    Library:Notify("✅ Sistem berhasil di-refresh ulang", 3)
end

-- ✅ Sistem Follow & Formasi
function setupBotFollowSystem()
    updateBotRefs()

    local function setupClient(player)
        if player.Name ~= clientName then return end
        client = player

        followConnection = player.Chatted:Connect(function(msg)
            msg = msg:lower()
            local hrp = client.Character and client.Character:FindFirstChild("HumanoidRootPart")
            if not hrp then return end

            if msg == "!stop" then
                runStopCommand()
            elseif msg == "!refresh" then
                fullRefresh()
            elseif msg == "!gabung" then
                followAllowed = false
                Library:Notify("Perintah !gabung diterima. Sinkronisasi...", 4)
                local args = { "sync", client.UserId }
                local success, err = pcall(function()
                    ReplicatedStorage:WaitForChild("Connections")
                        :WaitForChild("dataProviders")
                        :WaitForChild("commandHandler")
                        :InvokeServer(unpack(args))
                end)
                if success then
                    Library:Notify("✅ Bot bergabung ke client ID: " .. client.UserId, 3)
                else
                    Library:Notify("❌ Gagal sync", 3)
                end
            elseif msg == "!ikuti" then
                followAllowed = true
                currentFormasiTarget = client
                Options.TextboxDisplayName:SetValue("")
                Library:Notify("Bot mengikuti client utama: " .. client.DisplayName, 3)
            elseif msg:match("^!ikuti ") then
                runStopCommand()
                local targetDisplayName = msg:sub(8)
                local foundTarget = nil
                
                for _, p in ipairs(Players:GetPlayers()) do
                    if p.DisplayName:lower() == targetDisplayName:lower() then
                        foundTarget = p
                        break
                    end
                end
                
                if foundTarget then
                    followAllowed = true
                    currentFormasiTarget = foundTarget
                    Options.TextboxDisplayName:SetValue(foundTarget.DisplayName)
                    Library:Notify("Mengikuti: " .. foundTarget.DisplayName, 3)
                else
                    Library:Notify("❌ Target tidak ditemukan: " .. targetDisplayName, 3)
                end
            elseif msg == "!pushup" then
                runStopCommand()
                local args = {
                    "playAnimation",
                    "Push Up"
                }
                local success = pcall(function()
                    ReplicatedStorage:WaitForChild("Connections")
                        :WaitForChild("dataProviders")
                        :WaitForChild("animationHandler")
                        :InvokeServer(unpack(args))
                end)
                if success then
                    Library:Notify("✅ Bot melakukan push up", 3)
                else
                    Library:Notify("❌ Gagal melakukan push up", 3)
                end
            elseif msg:match("^!formasi[1234]") then
                runStopCommand()
                local formasiCmd, displayName = msg:match("^!(formasi[1234])%s*(.*)")
                displayName = displayName and displayName:lower()

                local target = nil
                if displayName ~= "" then
                    for _, p in ipairs(Players:GetPlayers()) do
                        if p.DisplayName:lower() == displayName then
                            target = p
                            currentFormasiTarget = p
                            break
                        end
                    end
                else
                    target = client
                    currentFormasiTarget = client
                end

                if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                    local hrp = target.Character.HumanoidRootPart
                    local uid = tostring(localPlayer.UserId)
                    local formasi = {}

                    if formasiCmd == "formasi1" then
                        Options.TextboxFormasi1:SetValue(target.DisplayName)
                        formasi = {
                            ["8802945328"] = hrp.Position + hrp.CFrame.LookVector * 5,
                            ["8802949363"] = hrp.Position + hrp.CFrame.RightVector * 5,
                            ["8802939883"] = hrp.Position - hrp.CFrame.RightVector * 5,
                            ["8802998147"] = hrp.Position - hrp.CFrame.LookVector * 5,
                            ["8802991722"] = hrp.Position + Vector3.new(0, 0, -7),
                        }
                    elseif formasiCmd == "formasi2" then
                        Options.TextboxFormasi2:SetValue(target.DisplayName)
                        formasi = {
                            ["8802945328"] = hrp.Position + hrp.CFrame.LookVector * 4 + hrp.CFrame.RightVector * 4,
                            ["8802949363"] = hrp.Position + hrp.CFrame.LookVector * 4 - hrp.CFrame.RightVector * 4,
                            ["8802939883"] = hrp.Position - hrp.CFrame.LookVector * 4 + hrp.CFrame.RightVector * 4,
                            ["8802998147"] = hrp.Position - hrp.CFrame.LookVector * 4 - hrp.CFrame.RightVector * 4,
                            ["8802991722"] = hrp.Position,
                        }
                    elseif formasiCmd == "formasi3" then
                        Options.TextboxFormasi3:SetValue(target.DisplayName)
                        formasi = {
                            ["8802945328"] = hrp.Position + hrp.CFrame.LookVector * 4 - hrp.CFrame.RightVector * 6,
                            ["8802949363"] = hrp.Position + hrp.CFrame.LookVector * 4 - hrp.CFrame.RightVector * 2,
                            ["8802939883"] = hrp.Position + hrp.CFrame.LookVector * 4 + hrp.CFrame.RightVector * 2,
                            ["8802998147"] = hrp.Position + hrp.CFrame.LookVector * 4 + hrp.CFrame.RightVector * 6,
                            ["8802991722"] = hrp.Position + hrp.CFrame.LookVector * 6,
                        }
                    elseif formasiCmd == "formasi4" then
                        Options.TextboxFormasi4:SetValue(target.DisplayName)
                        formasi = {
                            ["8802945328"] = hrp.Position - hrp.CFrame.LookVector * 3 + hrp.CFrame.RightVector * 6,
                            ["8802949363"] = hrp.Position - hrp.CFrame.LookVector * 3 + hrp.CFrame.RightVector * 3,
                            ["8802939883"] = hrp.Position - hrp.CFrame.LookVector * 3,
                            ["8802998147"] = hrp.Position - hrp.CFrame.LookVector * 3 - hrp.CFrame.RightVector * 3,
                            ["8802991722"] = hrp.Position - hrp.CFrame.LookVector * 3 - hrp.CFrame.RightVector * 6,
                        }
                    end

                    local posisiTarget = formasi[uid]
                    if posisiTarget then
                        myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, hrp.Position)
                        smartMoveTo(posisiTarget, hrp)
                    end
                else
                    Library:Notify("❌ Target tidak ditemukan!", 3)
                    currentFormasiTarget = nil
                end
            elseif msg == "!absen" then
                runStopCommand()
                local uid = tostring(localPlayer.UserId)
                local urutanBot = {
                    ["8802945328"] = 1,
                    ["8802949363"] = 2,
                    ["8802939883"] = 3,
                    ["8802998147"] = 4,
                    ["8802991722"] = 5,
                }
                local giliran = urutanBot[uid]
                if not giliran then return end

                task.spawn(function()
                    task.wait((giliran - 1) * 2.5)
                    local posisiAwal = myRootPart.Position
                    local posisiAbsen = hrp.Position + hrp.CFrame.LookVector * 3 + Vector3.new(0, 0.1, 0)
                    myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, hrp.Position)
                    smartMoveTo(posisiAbsen, hrp)
                    humanoid.MoveToFinished:Wait()
                    task.wait(1.5)
                    myRootPart.CFrame = CFrame.lookAt(posisiAbsen, posisiAwal)
                    smartMoveTo(posisiAwal, hrp)
                end)
            end
        end)
    end

    for _, p in ipairs(Players:GetPlayers()) do
        setupClient(p)
    end

    Players.PlayerAdded:Connect(setupClient)
    localPlayer.CharacterAdded:Connect(updateBotRefs)

    loopTask = RunService.Heartbeat:Connect(function()
        if followAllowed and toggleAktif and currentFormasiTarget and currentFormasiTarget.Character and humanoid and myRootPart then
            local targetHRP = currentFormasiTarget.Character:FindFirstChild("HumanoidRootPart")
            if targetHRP then
                local followPos = targetHRP.Position - targetHRP.CFrame.LookVector * jarakIkut
                local dist = (myRootPart.Position - followPos).Magnitude
                
                -- Only move if beyond minimum distance or if pathfinding is active
                if dist > jarakMinimum or path then
                    smartMoveTo(followPos, targetHRP)
                end
            end
        end
    end)
end
