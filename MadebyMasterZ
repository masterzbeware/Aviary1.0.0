-- ✅ Obsidian UI Setup
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "Made by MasterZ",
    Footer = "v1.0.0",
    Icon = 0,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("Main", "user")
}

-- ✅ Global Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PathfindingService = game:GetService("PathfindingService")
local localPlayer = Players.LocalPlayer

local clientName = ""
local jarakIkut = 5          -- Default follow distance
local jarakFormasi = 5       -- Formation distance (separate from follow distance)
local jarakMinimum = 2
local toggleAktif = false
local followAllowed = false
local currentFormasiTarget = nil
local adminName = "bodyguardshoprblx"

-- Pathfinding variables
local path = nil
local lastPathUpdate = 0
local pathUpdateInterval = 0.5 -- Update path every 0.5 seconds
local lastTargetPosition = nil
local pathfindingEnabled = true
local pathfindingObstacleTolerance = 3 -- How many failed attempts before giving up
local currentObstacleAttempts = 0

-- Individual bot settings
local botSettings = {
    ["8802945328"] = {followDistance = 5, minDistance = 2}, -- BotID1
    ["8802949363"] = {followDistance = 5, minDistance = 2}, -- BotID2
    ["8802939883"] = {followDistance = 5, minDistance = 2}, -- BotID3
    ["8802998147"] = {followDistance = 5, minDistance = 2}, -- BotID4
    ["8802991722"] = {followDistance = 5, minDistance = 2}  -- BotID5
}

local followConnection = nil
local loopTask = nil
local humanoid = nil
local myRootPart = nil
local client = nil

-- ✅ Pathfinding Functions
local function computePath(targetPosition)
    if not myRootPart or not humanoid then return nil end
    
    local success, result = pcall(function()
        local newPath = PathfindingService:CreatePath({
            AgentRadius = 2,
            AgentHeight = 5,
            AgentCanJump = true,
            WaypointSpacing = 1,
            Costs = {
                Water = 10,
                Lava = math.huge
            }
        })
        
        newPath:ComputeAsync(myRootPart.Position, targetPosition)
        return newPath
    end)
    
    if success and result.Status == Enum.PathStatus.Success then
        return result
    end
    return nil
end

local function followPath(targetPosition)
    if not path or not myRootPart or not humanoid then return end
    
    local waypoints = path:GetWaypoints()
    if #waypoints == 0 then return end
    
    -- Skip the first waypoint if it's too close to current position
    local startIndex = 1
    if (waypoints[1].Position - myRootPart.Position).Magnitude < 2 then
        startIndex = 2
    end
    
    for i = startIndex, #waypoints do
        if not followAllowed or not toggleAktif or not currentFormasiTarget then break end
        
        local waypoint = waypoints[i]
        humanoid:MoveTo(waypoint.Position)
        
        -- Face the next waypoint or target
        if i < #waypoints then
            myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, waypoints[i+1].Position)
        else
            myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, targetPosition)
        end
        
        -- Wait until reached or interrupted
        local reached = false
        local connection
        connection = humanoid.MoveToFinished:Connect(function(reached)
            if reached then
                connection:Disconnect()
                reached = true
            end
        end)
        
        local startTime = tick()
        while not reached and (tick() - startTime) < 3 do -- Timeout after 3 seconds
            if not followAllowed or not toggleAktif or not currentFormasiTarget then 
                connection:Disconnect()
                return 
            end
            task.wait()
        end
        
        -- Jump if needed
        if waypoint.Action == Enum.PathWaypointAction.Jump then
            humanoid.Jump = true
        end
    end
end

-- ✅ Reset & Stop Function
local function runStopCommand()
    followAllowed = false
    currentFormasiTarget = nil
    path = nil
    lastTargetPosition = nil
    currentObstacleAttempts = 0
    
    if humanoid and myRootPart then
        humanoid:MoveTo(myRootPart.Position)
    end
    Options.TextboxDisplayName:SetValue("")
    Options.TextboxFormasi1:SetValue("")
    Options.TextboxFormasi2:SetValue("")
    Options.TextboxFormasi3:SetValue("")
    Options.TextboxFormasi4:SetValue("")
    local args = { "leaveSync" }
    pcall(function()
        ReplicatedStorage:WaitForChild("Connections")
            :WaitForChild("dataProviders")
            :WaitForChild("animationHandler")
            :InvokeServer(unpack(args))
    end)
    
    local stopArgs = { "stopAnimation", "Push Up" }
    pcall(function()
        ReplicatedStorage:WaitForChild("Connections")
            :WaitForChild("dataProviders")
            :WaitForChild("animationHandler")
            :InvokeServer(unpack(stopArgs))
    end)
    
    Library:Notify("❌ Bot stopped & textboxes cleared", 3)
end

-- ✅ Restart Bot Function
local function restartBot()
    runStopCommand()
    if followConnection then followConnection:Disconnect() end
    if loopTask then loopTask:Disconnect() end
    
    task.wait(0.5) -- Small delay before restarting
    
    if toggleAktif then
        setupBotFollowSystem()
        Library:Notify("✅ Bot restarted with new client: "..clientName, 5)
    end
end

-- ✅ UI LEFT - Main Tab
local GroupBox1 = Tabs.Main:AddLeftGroupbox("Main Options")

GroupBox1:AddToggle("AktifkanFollow", {
    Text = "Enable Bot Follow",
    Default = false,
    Tooltip = "Enable to accept !ikuti commands",
    Callback = function(Value)
        toggleAktif = Value
        if Value then
            Library:Notify("Bot Follow Enabled", 3)
            if followConnection then followConnection:Disconnect() end
            if loopTask then loopTask:Disconnect() end
            setupBotFollowSystem()
        else
            Library:Notify("Bot Follow Disabled", 3)
            runStopCommand()
            if loopTask then loopTask:Disconnect() end
            if followConnection then followConnection:Disconnect() end
        end
    end,
})

GroupBox1:AddInput("NamaClientInput", {
    Default = "",
    Text = "Client Name",
    Placeholder = "Example: MasterZ_YT",
    Callback = function(Value)
        clientName = Value
        print("Client set to:", clientName)
    end,
})

GroupBox1:AddInput("AdminName", {
    Default = "bodyguardshoprblx",
    Text = "Admin Name",
    Placeholder = "bodyguardshoprblx",
    Callback = function(Value)
        adminName = Value
        print("Admin Name set to:", adminName)
    end,
})

-- Add Formation Distance Setting
GroupBox1:AddInput("JarakFormasiInput", {
    Default = "5",
    Text = "Formation Distance",
    Placeholder = "Example: 5",
    Callback = function(Value)
        local number = tonumber(Value)
        if number then
            jarakFormasi = number
            Library:Notify("Formation distance set to: "..number, 3)
        end
    end,
})

-- Add Pathfinding Toggle
GroupBox1:AddToggle("EnablePathfinding", {
    Text = "Enable Pathfinding",
    Default = true,
    Tooltip = "Enable advanced pathfinding for obstacle avoidance",
    Callback = function(Value)
        pathfindingEnabled = Value
        Library:Notify("Pathfinding "..(Value and "Enabled" or "Disabled"), 3)
    end,
})

-- ✅ GroupBox3 - Textboxes
local GroupBox3 = Tabs.Main:AddLeftGroupbox("Textbox")

GroupBox3:AddInput("TextboxDisplayName", {
    Default = "",
    Text = "Target DisplayName",
    Placeholder = "Empty",
    Callback = function(Value)
        print("DisplayName target:", Value)
    end,
})

GroupBox3:AddInput("TextboxFormasi1", {
    Default = "",
    Text = "Formation 1 Target",
    Placeholder = "Empty",
    Callback = function(Value)
        print("Formation 1 Target:", Value)
    end,
})

GroupBox3:AddInput("TextboxFormasi2", {
    Default = "",
    Text = "Formation 2 Target",
    Placeholder = "Empty",
    Callback = function(Value)
        print("Formation 2 Target:", Value)
    end,
})

GroupBox3:AddInput("TextboxFormasi3", {
    Default = "",
    Text = "Formation 3 Target",
    Placeholder = "Empty",
    Callback = function(Value)
        print("Formation 3 Target:", Value)
    end,
})

GroupBox3:AddInput("TextboxFormasi4", {
    Default = "",
    Text = "Formation 4 Target",
    Placeholder = "Empty",
    Callback = function(Value)
        print("Formation 4 Target:", Value)
    end,
})

-- ✅ UI RIGHT - Distance Settings
local GroupBox2 = Tabs.Main:AddRightGroupbox("Distance Settings")

GroupBox2:AddInput("JarakIkutInput", {
    Default = "5",
    Text = "Follow Distance",
    Placeholder = "Example: 5",
    Callback = function(Value)
        local number = tonumber(Value)
        if number then
            jarakIkut = number
            Library:Notify("Follow distance set to: "..number, 3)
        end
    end,
})

GroupBox2:AddInput("JarakMinimumInput", {
    Default = "2",
    Text = "Minimum Move Distance",
    Placeholder = "Example: 2",
    Callback = function(Value)
        local number = tonumber(Value)
        if number then
            jarakMinimum = number
            Library:Notify("Minimum distance set to: "..number, 3)
        end
    end,
})

-- ✅ Helper Functions
local function updateBotRefs()
    local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    humanoid = character:WaitForChild("Humanoid")
    myRootPart = character:WaitForChild("HumanoidRootPart")
end

local function fullRefresh()
    runStopCommand()
    task.wait(0.5)
    
    currentFormasiTarget = nil
    followAllowed = false
    
    if followConnection then followConnection:Disconnect() end
    if loopTask then loopTask:Disconnect() end
    
    if toggleAktif then
        setupBotFollowSystem()
    end
    
    Library:Notify("✅ System refreshed", 3)
end

-- ✅ Improved Movement Function
local function moveToTarget(targetPosition)
    if not myRootPart or not humanoid then return end
    
    -- Simple direct movement if pathfinding is disabled
    if not pathfindingEnabled then
        myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, targetPosition)
        humanoid:MoveTo(targetPosition)
        return
    end
    
    -- Check if we need to compute a new path
    local currentTime = tick()
    local targetMoved = lastTargetPosition and (targetPosition - lastTargetPosition).Magnitude > 2
    local shouldUpdatePath = not path or targetMoved or (currentTime - lastPathUpdate) > pathUpdateInterval
    
    if shouldUpdatePath then
        lastTargetPosition = targetPosition
        lastPathUpdate = currentTime
        
        local newPath = computePath(targetPosition)
        if newPath then
            path = newPath
            currentObstacleAttempts = 0 -- Reset obstacle counter on successful path
        else
            currentObstacleAttempts = currentObstacleAttempts + 1
            if currentObstacleAttempts >= pathfindingObstacleTolerance then
                -- Fallback to simple movement if pathfinding keeps failing
                myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, targetPosition)
                humanoid:MoveTo(targetPosition)
                return
            end
        end
    end
    
    -- Follow the computed path
    if path then
        followPath(targetPosition)
    end
end

-- ✅ Follow & Formation System
function setupBotFollowSystem()
    updateBotRefs()

    -- Function to handle admin commands
    local function handleAdminCommand(player, msg)
        if player.Name ~= adminName then return false end
        
        msg = msg:lower()
        local currentBotID = tostring(localPlayer.UserId)
        
        -- Handle !clientname [username]
        if msg:match("^!clientname ") then
            local newName = msg:sub(12):gsub("^%s*(.-)%s*$", "%1")
            if newName ~= "" then
                clientName = newName
                Options.NamaClientInput:SetValue(newName)
                Library:Notify("Admin changed client name to: "..newName, 5)
                
                -- Restart the bot with new client name
                task.spawn(restartBot)
                return true
            else
                Library:Notify("❌ Client name cannot be empty", 3)
                return true
            end
        end
        
        -- Handle !aturjarak commands (only affects follow distance)
        for i = 1, 5 do
            if msg:match("^!aturjarak"..i.."%s") then
                local distance = tonumber(msg:match("%d+$"))
                if distance and distance > 0 then
                    local botID = ""
                    if i == 1 then botID = "8802945328"
                    elseif i == 2 then botID = "8802949363"
                    elseif i == 3 then botID = "8802939883"
                    elseif i == 4 then botID = "8802998147"
                    elseif i == 5 then botID = "8802991722" end
                    
                    botSettings[botID].followDistance = distance
                    Library:Notify("Admin set BotID"..i.." ("..botID..") follow distance to: "..distance, 5)
                    
                    if currentBotID == botID then
                        jarakIkut = distance
                        Options.JarakIkutInput:SetValue(tostring(distance))
                    end
                    return true
                else
                    Library:Notify("❌ Distance must be positive number", 3)
                    return true
                end
            end
            
            -- Handle !minjarak commands
            if msg:match("^!minjarak"..i.."%s") then
                local minDistance = tonumber(msg:match("%d+$"))
                if minDistance and minDistance > 0 then
                    local botID = ""
                    if i == 1 then botID = "8802945328"
                    elseif i == 2 then botID = "8802949363"
                    elseif i == 3 then botID = "8802939883"
                    elseif i == 4 then botID = "8802998147"
                    elseif i == 5 then botID = "8802991722" end
                    
                    botSettings[botID].minDistance = minDistance
                    Library:Notify("Admin set BotID"..i.." ("..botID..") min distance to: "..minDistance, 5)
                    
                    if currentBotID == botID then
                        jarakMinimum = minDistance
                        Options.JarakMinimumInput:SetValue(tostring(minDistance))
                    end
                    return true
                else
                    Library:Notify("❌ Min distance must be positive number", 3)
                    return true
                end
            end
        end
        return false
    end

    local function setupClient(player)
        if player.Name ~= clientName then return end
        client = player

        followConnection = player.Chatted:Connect(function(msg)
            -- Check admin commands first
            if handleAdminCommand(player, msg) then return end
            
            msg = msg:lower()
            local hrp = client.Character and client.Character:FindFirstChild("HumanoidRootPart")
            if not hrp then return end

            if msg == "!stop" then
                runStopCommand()
            elseif msg == "!refresh" then
                fullRefresh()
            elseif msg == "!gabung" then
                followAllowed = false
                Library:Notify("!gabung command received. Syncing...", 4)
                local args = { "sync", client.UserId }
                local success, err = pcall(function()
                    ReplicatedStorage:WaitForChild("Connections")
                        :WaitForChild("dataProviders")
                        :WaitForChild("commandHandler")
                        :InvokeServer(unpack(args))
                end)
                if success then
                    Library:Notify("✅ Bot joined client ID: " .. client.UserId, 3)
                else
                    Library:Notify("❌ Sync failed", 3)
                end
            elseif msg == "!ikuti" then
                followAllowed = true
                currentFormasiTarget = client
                Options.TextboxDisplayName:SetValue("")
                Library:Notify("Bot following main client: " .. client.DisplayName, 3)
            elseif msg:match("^!ikuti ") then
                runStopCommand()
                local targetDisplayName = msg:sub(8)
                local foundTarget = nil
                
                for _, p in ipairs(Players:GetPlayers()) do
                    if p.DisplayName:lower() == targetDisplayName:lower() then
                        foundTarget = p
                        break
                    end
                end
                
                if foundTarget then
                    followAllowed = true
                    currentFormasiTarget = foundTarget
                    Options.TextboxDisplayName:SetValue(foundTarget.DisplayName)
                    Library:Notify("Following: " .. foundTarget.DisplayName, 3)
                else
                    Library:Notify("❌ Target not found: " .. targetDisplayName, 3)
                end
            elseif msg == "!pushup" then
                runStopCommand()
                local args = {
                    "playAnimation",
                    "Push Up"
                }
                local success = pcall(function()
                    ReplicatedStorage:WaitForChild("Connections")
                        :WaitForChild("dataProviders")
                        :WaitForChild("animationHandler")
                        :InvokeServer(unpack(args))
                end)
                if success then
                    Library:Notify("✅ Bot doing push up", 3)
                else
                    Library:Notify("❌ Failed to do push up", 3)
                end
            elseif msg:match("^!formasi[1234]") then
                runStopCommand()
                local formasiCmd, displayName = msg:match("^!(formasi[1234])%s*(.*)")
                displayName = displayName and displayName:lower()

                local target = nil
                if displayName ~= "" then
                    for _, p in ipairs(Players:GetPlayers()) do
                        if p.DisplayName:lower() == displayName:lower() then
                            target = p
                            currentFormasiTarget = p
                            break
                        end
                    end
                else
                    target = client
                    currentFormasiTarget = client
                end

                if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                    local hrp = target.Character.HumanoidRootPart
                    local uid = tostring(localPlayer.UserId)
                    local formasi = {}

                    -- All formations use jarakFormasi (not affected by !aturjarak)
                    if formasiCmd == "formasi1" then
                        Options.TextboxFormasi1:SetValue(target.DisplayName)
                        formasi = {
                            ["8802945328"] = hrp.Position + (hrp.CFrame.LookVector * jarakFormasi),
                            ["8802949363"] = hrp.Position + (hrp.CFrame.RightVector * jarakFormasi),
                            ["8802939883"] = hrp.Position + (hrp.CFrame.RightVector * -jarakFormasi),
                            ["8802998147"] = hrp.Position + (hrp.CFrame.LookVector * -jarakFormasi),
                            ["8802991722"] = hrp.Position + Vector3.new(0, 0, -jarakFormasi)
                        }
                    elseif formasiCmd == "formasi2" then
                        Options.TextboxFormasi2:SetValue(target.DisplayName)
                        local diagonalDist = jarakFormasi * 0.7071
                        formasi = {
                            ["8802945328"] = hrp.Position + (hrp.CFrame.LookVector * diagonalDist) + (hrp.CFrame.RightVector * diagonalDist),
                            ["8802949363"] = hrp.Position + (hrp.CFrame.LookVector * diagonalDist) + (hrp.CFrame.RightVector * -diagonalDist),
                            ["8802939883"] = hrp.Position + (hrp.CFrame.LookVector * -diagonalDist) + (hrp.CFrame.RightVector * diagonalDist),
                            ["8802998147"] = hrp.Position + (hrp.CFrame.LookVector * -diagonalDist) + (hrp.CFrame.RightVector * -diagonalDist),
                            ["8802991722"] = hrp.Position
                        }
                    elseif formasiCmd == "formasi3" then
                        Options.TextboxFormasi3:SetValue(target.DisplayName)
                        formasi = {
                            ["8802945328"] = hrp.Position + (hrp.CFrame.LookVector * jarakFormasi) + (hrp.CFrame.RightVector * -jarakFormasi*1.5),
                            ["8802949363"] = hrp.Position + (hrp.CFrame.LookVector * jarakFormasi) + (hrp.CFrame.RightVector * -jarakFormasi*0.5),
                            ["8802939883"] = hrp.Position + (hrp.CFrame.LookVector * jarakFormasi) + (hrp.CFrame.RightVector * jarakFormasi*0.5),
                            ["8802998147"] = hrp.Position + (hrp.CFrame.LookVector * jarakFormasi) + (hrp.CFrame.RightVector * jarakFormasi*1.5),
                            ["8802991722"] = hrp.Position + (hrp.CFrame.LookVector * jarakFormasi*1.2)
                        }
                    elseif formasiCmd == "formasi4" then
                        Options.TextboxFormasi4:SetValue(target.DisplayName)
                        formasi = {
                            ["8802945328"] = hrp.Position + (hrp.CFrame.LookVector * -jarakFormasi*0.75) + (hrp.CFrame.RightVector * jarakFormasi*1.5),
                            ["8802949363"] = hrp.Position + (hrp.CFrame.LookVector * -jarakFormasi*0.75) + (hrp.CFrame.RightVector * jarakFormasi*0.75),
                            ["8802939883"] = hrp.Position + (hrp.CFrame.LookVector * -jarakFormasi*0.75),
                            ["8802998147"] = hrp.Position + (hrp.CFrame.LookVector * -jarakFormasi*0.75) + (hrp.CFrame.RightVector * -jarakFormasi*0.75),
                            ["8802991722"] = hrp.Position + (hrp.CFrame.LookVector * -jarakFormasi*0.75) + (hrp.CFrame.RightVector * -jarakFormasi*1.5)
                        }
                    end

                    local posisiTarget = formasi[uid]
                    if posisiTarget then
                        myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, hrp.Position)
                        moveToTarget(posisiTarget)
                    end
                else
                    Library:Notify("❌ Target not found!", 3)
                    currentFormasiTarget = nil
                end
            elseif msg == "!absen" then
                runStopCommand()
                local uid = tostring(localPlayer.UserId)
                local urutanBot = {
                    ["8802945328"] = 1,
                    ["8802949363"] = 2,
                    ["8802939883"] = 3,
                    ["8802998147"] = 4,
                    ["8802991722"] = 5,
                }
                local giliran = urutanBot[uid]
                if not giliran then return end

                task.spawn(function()
                    task.wait((giliran - 1) * 2.5)
                    local posisiAwal = myRootPart.Position
                    local posisiAbsen = hrp.Position + hrp.CFrame.LookVector * 3 + Vector3.new(0, 0.1, 0)
                    myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, hrp.Position)
                    moveToTarget(posisiAbsen)
                    humanoid.MoveToFinished:Wait()
                    task.wait(1.5)
                    myRootPart.CFrame = CFrame.lookAt(posisiAbsen, posisiAwal)
                    moveToTarget(posisiAwal)
                end)
            end
        end)
    end

    -- Handle existing admin
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Name == adminName then
            player.Chatted:Connect(function(msg)
                handleAdminCommand(player, msg)
            end)
        end
        setupClient(player)
    end

    -- Handle new admin joining
    Players.PlayerAdded:Connect(function(player)
        if player.Name == adminName then
            player.Chatted:Connect(function(msg)
                handleAdminCommand(player, msg)
            end)
        end
        setupClient(player)
    end)

    localPlayer.CharacterAdded:Connect(updateBotRefs)

    loopTask = RunService.Heartbeat:Connect(function()
        if followAllowed and toggleAktif and currentFormasiTarget and currentFormasiTarget.Character and humanoid and myRootPart then
            local targetHRP = currentFormasiTarget.Character:FindFirstChild("HumanoidRootPart")
            if targetHRP then
                local currentBotID = tostring(localPlayer.UserId)
                local settings = botSettings[currentBotID] or {followDistance = jarakIkut, minDistance = jarakMinimum}
                
                local followPos = targetHRP.Position - targetHRP.CFrame.LookVector * settings.followDistance
                local dist = (myRootPart.Position - followPos).Magnitude
                if dist > settings.minDistance then
                    moveToTarget(followPos)
                end
            end
        end
    end)
end
