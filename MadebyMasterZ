-- ✅ Obsidian UI Setup
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()

local Options = Library.Options

local Window = Library:CreateWindow({
    Title = "Made by MasterZ",
    Footer = "v2.0.0",
    Icon = 0,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("Main", "user")
}

-- ✅ Global Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer

local clientName = ""
local jarakIkut = 5
local toggleAktif = false
local followAllowed = false
local currentFormasiTarget = nil

local followConnection = nil
local loopTask = nil
local humanoid = nil
local myRootPart = nil
local client = nil

-- ✅ Helper Functions
local function updateBotRefs()
    local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    humanoid = character:WaitForChild("Humanoid")
    myRootPart = character:WaitForChild("HumanoidRootPart")
end

-- ✅ Reset function
local function runStopCommand()
    followAllowed = false
    currentFormasiTarget = nil
end

-- ✅ UI - Main Tab
local GroupBox1 = Tabs.Main:AddLeftGroupbox("Main Options")

GroupBox1:AddToggle("AktifkanFollow", {
    Text = "Enable Bot Follow",
    Default = false,
    Tooltip = "Enable to accept !ikuti commands",
    Callback = function(Value)
        toggleAktif = Value
        if Value then
            Library:Notify("Bot Follow Enabled", 3)
            if followConnection then followConnection:Disconnect() end
            if loopTask then loopTask:Disconnect() end
            setupBotFollowSystem()
        else
            Library:Notify("Bot Follow Disabled", 3)
            runStopCommand()
            if loopTask then loopTask:Disconnect() end
            if followConnection then followConnection:Disconnect() end
        end
    end,
})

GroupBox1:AddInput("NamaClientInput", {
    Default = "",
    Text = "Client Name",
    Placeholder = "Example: MasterZ_YT",
    Callback = function(Value)
        clientName = Value
        print("Client set to:", clientName)
    end,
})

GroupBox1:AddInput("JarakIkutInput", {
    Default = "5",
    Text = "Follow Distance",
    Placeholder = "Example: 5",
    Callback = function(Value)
        local number = tonumber(Value)
        if number then
            jarakIkut = number
            Library:Notify("Follow distance set to: "..number, 3)
        end
    end,
})

-- ✅ Follow System
function setupBotFollowSystem()
    updateBotRefs()

    local function setupClient(player)
        if player.Name ~= clientName then return end
        client = player

        followConnection = player.Chatted:Connect(function(msg)
            msg = msg:lower()
            local hrp = client.Character and client.Character:FindFirstChild("HumanoidRootPart")
            if not hrp then return end

            if msg:match("^!ikuti") then
                followAllowed = true
                currentFormasiTarget = client
                Options.TextboxDisplayName:SetValue("")
                Library:Notify("Bot following main client: " .. client.DisplayName, 3)
            end
        end)
    end

    for _, player in ipairs(Players:GetPlayers()) do
        setupClient(player)
    end

    Players.PlayerAdded:Connect(setupClient)
    localPlayer.CharacterAdded:Connect(updateBotRefs)

    loopTask = RunService.Heartbeat:Connect(function()
        if toggleAktif and currentFormasiTarget and currentFormasiTarget.Character and humanoid and myRootPart then
            local targetHRP = currentFormasiTarget.Character:FindFirstChild("HumanoidRootPart")
            if targetHRP and followAllowed then
                local followPos = targetHRP.Position - targetHRP.CFrame.LookVector * jarakIkut
                local dist = (myRootPart.Position - followPos).Magnitude
                if dist > 2 then
                    myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, targetHRP.Position)
                    humanoid:MoveTo(followPos)
                end
            end
        end
    end)
end
