-- ✅ Obsidian UI Setup
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "Made by MasterZ",
    Footer = "v2.1.0",  -- Updated version
    Icon = 0,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("Main", "user"),
    Advanced = Window:AddTab("Advanced", "settings"),  -- New tab for advanced settings
}

-- ✅ Variabel Global
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PathfindingService = game:GetService("PathfindingService")  -- Added pathfinding service
local localPlayer = Players.LocalPlayer

local clientName = ""
local jarakIkut = 5
local jarakMinimum = 2
local toggleAktif = false
local followAllowed = false
local currentFormasiTarget = nil
local avoidWallsEnabled = true  -- New setting for wall avoidance
local pathRefreshRate = 0.5  -- How often to recalculate path (seconds)

-- ✅ Fungsi Pathfinding
local function calculatePath(targetPosition)
    local character = localPlayer.Character
    if not character then return nil end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return nil end
    
    local path = PathfindingService:CreatePath({
        AgentRadius = 2,
        AgentHeight = 5,
        AgentCanJump = true,
        WaypointSpacing = 4,
        Costs = {
            Water = 10,
            Lava = 20,
        }
    })
    
    path:ComputeAsync(humanoidRootPart.Position, targetPosition)
    
    if path.Status == Enum.PathStatus.Success then
        local waypoints = path:GetWaypoints()
        return waypoints
    else
        Library:Notify("⚠️ Tidak bisa menemukan jalan", 2)
        return nil
    end
end

local function followPath(waypoints)
    local humanoid = localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid")
    if not humanoid then return end
    
    for _, waypoint in ipairs(waypoints) do
        if waypoint.Action == Enum.PathWaypointAction.Jump then
            humanoid.Jump = true
        end
        
        humanoid:MoveTo(waypoint.Position)
        local reached = humanoid.MoveToFinished:Wait()
        
        if not reached then
            return false  -- Failed to reach waypoint
        end
    end
    
    return true  -- Successfully followed path
end

-- ✅ Enhanced Movement System
local function smartMoveTo(targetPosition)
    if not avoidWallsEnabled then
        -- Simple movement if wall avoidance is disabled
        local humanoid = localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid:MoveTo(targetPosition)
        end
        return
    end
    
    -- Check for direct line of sight
    local character = localPlayer.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    -- Raycast to check for obstacles
    local direction = (targetPosition - humanoidRootPart.Position).Unit
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    
    local raycastResult = workspace:Raycast(
        humanoidRootPart.Position,
        direction * (targetPosition - humanoidRootPart.Position).Magnitude,
        raycastParams
    )
    
    if not raycastResult then
        -- No obstacles, move directly
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid:MoveTo(targetPosition)
        end
    else
        -- Obstacle detected, use pathfinding
        local waypoints = calculatePath(targetPosition)
        if waypoints then
            followPath(waypoints)
        else
            -- Fallback to simple movement if pathfinding fails
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid:MoveTo(targetPosition)
            end
        end
    end
end

-- ✅ Updated runStopCommand with pathfinding cleanup
local function runStopCommand()
    followAllowed = false
    currentFormasiTarget = nil
    if humanoid and myRootPart then
        humanoid:MoveTo(myRootPart.Position)
    end
    Options.TextboxDisplayName:SetValue("")
    Options.TextboxFormasi1:SetValue("")
    Options.TextboxFormasi2:SetValue("")
    Options.TextboxFormasi3:SetValue("")
    Options.TextboxFormasi4:SetValue("")
    local args = { "leaveSync" }
    pcall(function()
        ReplicatedStorage:WaitForChild("Connections")
            :WaitForChild("dataProviders")
            :WaitForChild("animationHandler")
            :InvokeServer(unpack(args))
    end)
    
    -- Stop pushup animation if playing
    local stopArgs = { "stopAnimation", "Push Up" }
    pcall(function()
        ReplicatedStorage:WaitForChild("Connections")
            :WaitForChild("dataProviders")
            :WaitForChild("animationHandler")
            :InvokeServer(unpack(stopArgs))
    end)
    
    Library:Notify("❌ Bot dihentikan & textbox dikosongkan", 3)
end

-- ✅ UI LEFT (Main Tab)
local GroupBox1 = Tabs.Main:AddLeftGroupbox("Main Options")

GroupBox1:AddToggle("AktifkanFollow", {
    Text = "Aktifkan Bot Follow",
    Default = false,
    Tooltip = "Nyalakan agar bot siap menerima perintah !ikuti",
    Callback = function(Value)
        toggleAktif = Value

        if Value then
            Library:Notify("Bot Follow Diaktifkan", 3)
            if followConnection then followConnection:Disconnect() end
            if loopTask then loopTask:Disconnect() end
            setupBotFollowSystem()
        else
            Library:Notify("Bot Follow Dimatikan", 3)
            runStopCommand()
            if loopTask then loopTask:Disconnect() end
            if followConnection then followConnection:Disconnect() end
        end
    end,
})

GroupBox1:AddInput("NamaClientInput", {
    Default = "",
    Text = "Nama Client",
    Placeholder = "Contoh: MasterZ_YT",
    Callback = function(Value)
        clientName = Value
        print("Client diatur ke:", clientName)
    end,
})

-- ✅ GroupBox3 (Textbox)
local GroupBox3 = Tabs.Main:AddLeftGroupbox("Textbox")

GroupBox3:AddInput("TextboxDisplayName", {
    Default = "",
    Text = "Target DisplayName",
    Placeholder = "Kosong",
    Callback = function(Value)
        print("DisplayName target:", Value)
    end,
})

-- ... (rest of your existing UI elements remain the same)

-- ✅ New Advanced Settings Tab
local AdvancedGroup = Tabs.Advanced:AddLeftGroupbox("Pathfinding Settings")

AdvancedGroup:AddToggle("AvoidWallsToggle", {
    Text = "Hindari Tembok/Rintangan",
    Default = true,
    Tooltip = "Aktifkan untuk membuat bot menghindari tembok dan rintangan",
    Callback = function(Value)
        avoidWallsEnabled = Value
        Library:Notify(Value and "🔄 Hindari rintangan diaktifkan" or "🔄 Hindari rintangan dimatikan", 2)
    end,
})

AdvancedGroup:AddSlider("PathRefreshSlider", {
    Text = "Kecepatan Update Path",
    Default = 5,
    Min = 1,
    Max = 10,
    Rounding = 0,
    Tooltip = "Semakin tinggi semakin jarang update path",
    Callback = function(Value)
        pathRefreshRate = 1.1 - (Value / 10)  -- Convert to 0.1-1.0 range
    end,
})

-- ✅ Enhanced Follow System
function setupBotFollowSystem()
    updateBotRefs()

    local lastPathUpdate = 0
    local currentWaypoints = {}
    local currentWaypointIndex = 1

    local function setupClient(player)
        if player.Name ~= clientName then return end
        client = player

        followConnection = player.Chatted:Connect(function(msg)
            -- ... (your existing chat command handlers remain the same)
        end)
    end

    -- ... (your existing setup code remains the same)

    loopTask = RunService.Heartbeat:Connect(function(deltaTime)
        if followAllowed and toggleAktif and currentFormasiTarget and currentFormasiTarget.Character and humanoid and myRootPart then
            local targetHRP = currentFormasiTarget.Character:FindFirstChild("HumanoidRootPart")
            if targetHRP then
                local followPos = targetHRP.Position - targetHRP.CFrame.LookVector * jarakIkut
                local dist = (myRootPart.Position - followPos).Magnitude
                
                if dist > jarakMinimum then
                    myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, targetHRP.Position)
                    
                    -- Use smart movement system
                    if avoidWallsEnabled then
                        local now = tick()
                        if now - lastPathUpdate > pathRefreshRate or #currentWaypoints == 0 then
                            lastPathUpdate = now
                            currentWaypoints = calculatePath(followPos) or {}
                            currentWaypointIndex = 1
                        end
                        
                        if #currentWaypoints > 0 then
                            if currentWaypointIndex <= #currentWaypoints then
                                local waypoint = currentWaypoints[currentWaypointIndex]
                                humanoid:MoveTo(waypoint.Position)
                                
                                -- Check if reached waypoint
                                if (myRootPart.Position - waypoint.Position).Magnitude < 3 then
                                    currentWaypointIndex = currentWaypointIndex + 1
                                end
                            end
                        else
                            -- Fallback to simple movement if pathfinding fails
                            humanoid:MoveTo(followPos)
                        end
                    else
                        -- Simple movement if wall avoidance is disabled
                        humanoid:MoveTo(followPos)
                    end
                end
            end
        end
    end)
end
